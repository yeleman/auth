
from django.test import TestCase
from django.contrib.auth.models import User, Group
from django.contrib.sites.models import Site
from django.template.defaultfilters import slugify
from django.db import IntegrityError
from django.contrib.contenttypes.models import ContentType

from rapidsms.models import Contact, Connection, Backend

from ..models import Role


class RoleBasesTests(TestCase):

            
    def setUp(self):
        
        self.user = User.objects.create(username='Joe')
        self.contact = Contact.objects.create(name='Bob', user=self.user)
        self.site = Site.objects.create(domain="www.superwebsite.org")
        self.group = Group.objects.create(name="Webmaster")
        self.role = Role.objects.create(context=self.site, group=self.group)
        self.contact.role_set.add(self.role)
        self.contact.save()
        
                         
    def test_you_can_add_a_user_to_contact(self):

        self.contact.user = User.objects.create(username='test')
        self.contact.save()
        Contact.objects.get(user__username='test')
        
    
    def test_a_role_link_a_contact_a_group_and_any_model(self):
    
        user = User.objects.create(username='Jonn')
        self.role.contacts.add(Contact.objects.create(name='Jonn', 
                                                      user=user))
        self.role.save()
        
        count = Contact.objects.get(name='Jonn').role_set.count()
        self.assertEqual(count , 1)
        
    
    def test_you_can_print_roles(self):
        self.assertEqual(str(self.role), "Webmaster for www.superwebsite.org") 
        
        
    def test_a_user_is_created_when_a_contact_doesnt_have_one(self):
    
        # has a user
        user = User.objects.create(username='Steeve')
        Contact.objects.create(name='Steeve', user=user)
        contact = Contact.objects.get(name='Steeve')
        self.assertEqual(contact.user.username, user.username)
        
        # auto create a user
        Contact.objects.create(name='Mel')
        contact = Contact.objects.get(name='Mel')
        self.assertTrue(contact.user)
       
        
    def test_auto_created_user_got_its_name_autogenerated(self):
        
        # username is connection identity
        backend = Backend.objects.create(name='fuzzey_backend')
        con = Connection.objects.create(identity='0123456789', backend=backend)
        contact = Contact.objects.create(name='Steeve')
        self.assertEqual(contact.user.username, '0123456789')
        
        # username is contact name slug + connection identity if identity is
        # not unique
        backend = Backend.objects.create(name='fuzzey_backend 2')
        con = Connection.objects.create(identity='0123456789', backend=backend)
        contact = Contact.objects.create(name='Lisa-Maria de la Bodega')
        self.assertEqual(contact.user.username, 
                         '0123456789_' + slugify('Lisa-Maria de la Bodega'))
        
        # if no connection:

        Connection.objects.all().delete()
        # user name is contact name slug  
        contact = Contact.objects.create(name='Lisa-Maria de la Bodega')
        self.assertEqual(contact.user.username, 
                         slugify('Lisa-Maria de la Bodega'))
        
        # user name is a contact name slug + contact id if contact name slug
        # is not unique 
        contact = Contact.objects.create(name='Lisa-Maria de la Bodega')
        user_name = "%s_%s" % ( contact.id, slugify('Lisa-Maria de la Bodega'))
        self.assertEqual(contact.user.username,  user_name)

   
    def test_adding_a_role_adds_the_group_to_the_user(self):
        
        # when adding roles to a contact
        group_id = self.role.group.pk
        self.contact.user.groups.get(pk=group_id)
   
        # when adding contacts to a role
        group = Group.objects.create(name="Moderator")
        role = Role.objects.create(context=self.site, group=group)
        role.contacts.add(self.contact)
        self.contact.user.groups.get(pk=group.id)
        
        
    def test_removing_a_role_removes_the_group_from_the_user(self):
      
        # when deleting roles from a contact
        group_id = self.role.group.pk
        self.contact.user.groups.get(pk=group_id)
        self.assertEqual(self.contact.role_set.count(), 1)
        self.contact.role_set.remove(self.role)
        self.assertEqual(self.contact.role_set.count(), 0)
        self.assertFalse(self.contact.user.groups.filter(pk=group_id).exists())
   
        # when deleting contacts from a role
        group = Group.objects.create(name="Moderator")
        role = Role.objects.create(context=self.site, group=group)
        role.contacts.add(self.contact)
        self.contact.user.groups.get(pk=group.id)
        self.assertEqual(self.contact.role_set.count(), 1)
        role.contacts.remove(self.contact)
        self.assertEqual(self.contact.role_set.count(), 0)
        self.assertFalse(self.contact.user.groups.filter(pk=group_id).exists())
 

    def test_removing_group_from_user_is_skipped_if_one_contact_role_has_this_group(self):
      
        # when deleting roles from a contact
        group_id = self.role.group.pk
        site = Site.objects.create(domain="www.hyperwebsite.org")
        role = Role.objects.create(context=site, group=self.group)
        self.contact.role_set.add(role)
        self.assertEqual(self.contact.role_set.count(), 2)
        self.contact.role_set.remove(self.role)
        self.assertEqual(self.contact.role_set.count(), 1)
        self.assertTrue(self.contact.user.groups.filter(pk=group_id).exists())
   
        # when deleting contacts from a role
        self.role.contacts.add(self.contact)
        self.assertEqual(self.contact.role_set.count(), 2)
        self.role.contacts.remove(self.contact)
        self.assertEqual(self.contact.role_set.count(), 1)
        self.assertTrue(self.contact.user.groups.filter(pk=group_id).exists())
        

    def test_clearing_remove_all_groups_from_contact(self):
      
         # when clearing roles from a contact
        contact = Contact.objects.create(name='Janis')
        contact.user.groups.clear()
        site = Site.objects.create(domain="www.hyperwebsite.org")
        group =  Group.objects.create(name="Moderator")
        role = Role.objects.create(group=group, context=site)
        contact.role_set.add(role, self.role)
        self.assertEqual(contact.user.groups.count(), 2)
      
        contact.role_set.clear()
        self.assertEqual(contact.role_set.count(), 0)
        self.assertEqual(contact.user.groups.count(), 0)
        
        # when clearing contacts from a role
        contact = Contact.objects.create(name='Ben')
        contact.user.groups.clear()
        contact.role_set.add(role, self.role)
        
        role.contacts.clear()
        self.assertEqual(contact.role_set.count(), 1)
        self.assertEqual(contact.user.groups.count(), 1)
        self.role.contacts.clear()
        self.assertEqual(contact.role_set.count(), 0)
        self.assertEqual(contact.user.groups.count(), 0)
        
   
    def test_has_role(self):
   
        site = Site.objects.create(domain="www.hyperwebsite.org")
        role = Role.objects.create(context=site, group=self.group)
        group = Group.objects.create(name="Moderator")
        
        self.assertTrue(self.contact.has_role(self.role))
        self.assertFalse(self.contact.has_role(role))
        
        self.assertTrue(self.contact.has_role(self.role.code))
        self.assertFalse(self.contact.has_role(role.code))
        
        self.assertTrue(self.contact.has_role(group=self.group))
        self.assertTrue(self.contact.has_role(group=self.group.name))
        self.assertFalse(self.contact.has_role(group=group))
        self.assertFalse(self.contact.has_role(group=group.name))
        
        self.assertTrue(self.contact.has_role(context=self.site))
        self.assertFalse(self.contact.has_role(context=site))
        
        self.assertTrue(self.contact.has_role(context=self.site, 
                                              group=self.group))
        self.assertTrue(self.contact.has_role(context=self.site, 
                                              group=self.group.name))
        self.assertFalse(self.contact.has_role(context=site, 
                                              group=self.group))
        self.assertFalse(self.contact.has_role(context=site, 
                                              group=self.group.name))
        self.assertFalse(self.contact.has_role(context=self.site, 
                                              group=group))
        self.assertFalse(self.contact.has_role(context=self.site, 
                                              group=group.name))
                                              
        self.assertRaises(ValueError, self.contact.has_role)
   
   
    def test_has_contact(self):
   
        site = Site.objects.create(domain="www.hyperwebsite.org")
        role = Role.objects.create(context=site, group=self.group)
   
        self.assertTrue(self.role.has_contact())
        self.assertFalse(role.has_contact())
        
        self.assertTrue(self.role.has_contact(self.contact))
        self.assertFalse(role.has_contact(Contact.objects.create(name='Janis')))
        
        
    def test_user_is_unique_accross_contacts(self):
    
        try:
            Contact.objects.create(name='Steeve', user=self.user)
            self.fail()
        except:
            pass
            
            
    def test_roles_count(self):
    
        site = Site.objects.create(domain="www.hyperwebsite.org")
        role = Role.objects.create(group=self.group, context=site)
        self.contact.role_set.add(role)
    
        self.assertEqual(self.contact.roles_count(group=self.group), 2)
        self.assertEqual(self.contact.roles_count(group=self.group.name), 2)
        self.assertEqual(self.contact.roles_count(context=self.site), 1)
        
        contact = Contact.objects.create(name='Ben')
        self.assertEqual(contact.roles_count(group=self.group), 0)
        self.assertEqual(contact.roles_count(group=self.group.name), 0)
        self.assertEqual(contact.roles_count(context=self.site), 0)
        
        self.assertRaises(ValueError, self.contact.roles_count)
        
        try:
            self.contact.roles_count(context=self.site, group=self.group)
            self.fail()
        except:
            pass
       
       
    def test_add_role(self):
    
        contact = Contact.objects.create(name='Sekou')
        contact.add_role(self.role)
        self.assertEqual(contact.role_set.all()[0], self.role)
        
        contact.role_set.clear()
        contact.add_role(self.role.code)
        self.assertEqual(contact.role_set.all()[0], self.role)
    
        contact = Contact.objects.create(name='Ben')
        contact.add_role(group=self.group, context=self.site)
        self.assertEqual(contact.role_set.all()[0], self.role)
   
        contact = Contact.objects.create(name='Georgia')
        contact.add_role(group=self.group.name, context=self.site)
        self.assertEqual(contact.role_set.all()[0], self.role)
        
        site = Site.objects.create(domain="www.hyperwebsite.org")
        try:
            contact.add_role(group=self.group, context=site)
            self.fail()
        except (Role.DoesNotExist, Group.DoesNotExist), e:
            pass
          
        try:
            contact.add_role(role='does not exists')
            self.fail()
        except (Role.DoesNotExist, Group.DoesNotExist), e:
            pass
            
        ctype = ContentType.objects.get_for_model(site)
            
        result = contact.add_role(group=self.group, context=site, create=True)
        role = Role.objects.get(group=self.group, context_type=ctype, 
                                                  context_id=site.id)
        self.assertEqual(result, (role, True, False)) 
                
        result = contact.add_role(group="Moderator", context=site, create=True)
        role = Role.objects.get(group__name="Moderator", context_type=ctype, 
                                                         context_id=site.id)
        self.assertEqual(result, (role, True, True)) 
        
     

    def test_unicities(self):
    
        site = Site.objects.create(domain="www.gigawebsite.org")
        Role.objects.create(group=self.group, context=site, code='CODE')
        
        site = Site.objects.create(domain="www.hyperwebsite.org")

        # code should be unique
        try:
            Role.objects.create(group=self.group, context=site, code='CODE') 
            self.fail()
        except IntegrityError:
            pass   
            
        # group and context should be unique together
        try:
            Role.objects.create(group=self.group, context=self.site) 
            self.fail()
        except IntegrityError:
            pass   
            
        # code should be autogenerated
        role = Role.objects.create(group=Group.objects.create(name="Moderator"), 
                                   context=self.site) 
        self.assertEqual(role.code, 'r002')
        Group.objects.get(name="Moderator").delete()
        
        # autogenerated code should try to be unique
        Role.objects.create(group=self.group, context=site, 
                            code='r003')
                            
        role = Role.objects.create(group=Group.objects.create(name="Moderator"), 
                                   context=self.site) 
                                   
        self.assertEqual(role.code, 'r004')
        
        # manually entered code that don't match the pattern should be excluded
        group = Group.objects.create(name="Duplicate")
        Role.objects.create(group=group, context=site, code='Super Code')
        group = Group.objects.create(name="Extra")
        role = Role.objects.create(group=group, context=site)
        self.assertEqual(role.code, 'r005')
        
        
        
    def test_remove_role(self):
    
        contact = Contact.objects.create(name='Sekou')
        contact.add_role(self.role)
        self.assertEqual(contact.role_set.all()[0], self.role)
        contact.remove_role(self.role)
        self.assertFalse(contact.role_set.all().exists())
        
        contact.add_role(self.role)
        self.assertEqual(contact.role_set.all()[0], self.role)
        contact.remove_role(self.role.code)
        self.assertFalse(contact.role_set.all().exists())
    
        contact.add_role(group=self.group, context=self.site)
        self.assertEqual(contact.role_set.all()[0], self.role)
        contact.remove_role(group=self.group, context=self.site)
        self.assertFalse(contact.role_set.all().exists())
   
        contact.add_role(group=self.group, context=self.site)
        self.assertEqual(contact.role_set.all()[0], self.role)
        contact.remove_role(group=self.group.name, context=self.site)
        self.assertFalse(contact.role_set.all().exists())
        
        site = Site.objects.create(domain="www.hyperwebsite.org")
        try:
            contact.remove_role(group=self.group, context=site)
            self.fail()
        except (Role.DoesNotExist, Group.DoesNotExist), e:
            pass
            
        try:
            contact.remove_role(role='does not exists')
            self.fail()
        except (Role.DoesNotExist, Group.DoesNotExist), e:
            pass
            

